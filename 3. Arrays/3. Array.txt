Operation of Data structure :- 
- Traversal
- insertion
- deletion
- searching
- sorting
- merging

diff algo can be used :-

1. ARRAY TRAVERSING(travalsal) :-

let data = [2, 34, 45, 32, 34, 56, 63, 97, 34,53];

1. using for loop
for (let i = 0; i < data.length; i++) {
  console.log(data[i]);
}


2. Using for of loop
for(const i of data) {
console.log(i);
}


2. ACCESING :-
-access specific number 

let data = [2, 34, 45, 32, 34, 56, 63, 97, 34,53];

1.Method
console.log(data[3])
=> 32

2.Method
let x  = 0
console.log(data[x])


3. INSERT ELEMENT IN ARRAY(Insertion) :-
-make array, define the position
-Use loop to insert new element
-insert element with defualt function

let data = [2, 34, 45, 32, 34, 56, 63, 97, 34,53];

1. adding element using loop
insert new element in new array and element should be move to the next position

let data = [60, 30, 10, 67, 40];
let newEl = 33;
let position = 2;
console.log(data);
//we have to start from last element
//loop started from last element
for (let i = data.length - 1; i >= 0; i--) {
  if (i >= position) {
    data[i + 1] = data[i];
    if (i == position) {
      data[i] = newEl;
    }
  }
}

console.log(data);

2.
let data = [1, 2, 3, 4, 5, 6, 7, 8, 9];
let newEl = 555;
let position = 1;
console.log(data);
for (let i = data.length - 1; i >= position; i--) {
  data[i + 1] = data[i];
}
data[position] = newEl;
console.log(data);


3. adding element using splice mathod
let data = [60, 30, 10, 67, 40];
data.splice(0, 0, 100);
console.log(data);



4. DELETE ELEMENT IN ARRAY(Deletion) :-
-make array, define the position
-use loops to delete element

1.
let data = [30, 20, 45, 76, 20, 80];

// dynamically
let position = 3;

for (let i = position; i < data.length - 1; i++) {
  data[i] = data[i + 1];
}
data.length = data.length - 1;

console.log(data);

Output :-
[ 30, 20, 45, 20, 80 ]

data.splice(2,1)(index postion of element, how many element)
console.log(data)


5.SEARCH ELEMENT IN ARRAY(searching)
using linear search algo
using loop

1. 

let data = [20,40,60,5,10,70,80,99];
let search = 70;
let index = undefined;
for(let i = 0; i<data.length; i++) { // or data.length - 1
//condition for searching element
if(data[i] ===search) {
  index = i
  break;
 }
}

console.log(index)

-2.  Search element by default :- 
let data = [20,40,60,5,10,70,80,99];
let search = 70;
let index = undefined;

console.log(data.indexOf(search)) //this return the position


6. MERGE TWO ARRAY USING FOR LOOPS(merging) :- 
1.

let data = [20, 40, 60, 5, 10, 70, 80, 99];
let data2 = [20, 30, 40, 50];
let data3 = [];

for (let i = 0; i < data.length; i++) {
  data3[i] = data[i];
}
for(let i = 0; i < data2.length; i++) {
 data3[data.length + i] = data2[i];
}
console.log(data3)
//takes a lot's of time

6 space comp.
19 lines time comp.

2.

let data = [40, 50, 60, 100];
let data2 = [40, 50, 60, 100];

let data3 = [...data2, ...data]
console.log(data3)


7.MERGE TWO ARRAY USING (WHILE LOOPS)
- this logic only work on sorted array(both side means left side kadun pan aani right side kadun pan)

// Given arrays
let data1 = [3, 7, 12, 34, 56, 90];
let data2 = [4, 9, 29, 45];
let data3 = [];

// Pointers for iterating through arrays
let d1 = 0;
let d2 = 0;
let d3 = 0;

// Merge arrays data1 and data2 into data3 in ascending order
while (d1 < data1.length && d2 < data2.length) {
  // Compare elements at the current positions in data1 and data2
  if (data1[d1] < data2[d2]) {
    // If element in data1 is smaller, add it to data3
    data3[d3] = data1[d1];
    d1++;
  } else {
    // If element in data2 is smaller or equal, add it to data3
    data3[d3] = data2[d2];
    d2++;
  }
  // Move the pointer in data3 to the next position
  d3++;
}

// Output the position of pointer d1 (useful for understanding loop termination)
console.log(d1); //loop 4 paryant chalala

// If there are remaining elements in data1, add them to data3
while (d1 < data1.length) {
  data3[d3] = data1[d1];
  d1++;
  d3++;
}

// Output the position of pointer d1 (useful for understanding loop termination)
console.log(d1); // loop ne 6 value add kelya

// Output the merged array data3
console.log(data3);

time comp = 32 lines
4 line space comp.

Space complexity :- how much "memory" it is taking

TIme Complexity :- No.of lines
- vary on system processor, current program working on our system, depend on system, ram , bytes.




8. ARRAY SORTING(Sorting) :-
- using nested loops
- This is a  bubble sort
- Size * Size


let data = [40, 30, 12, 25];
//let data = [34, 3, 1, 25];
for (let i = 0; i < data.length; i++) {
  console.log(i);
  for (let j = 0; j < data.length; j++) {
    console.log(data); //loop iterate 4 times  0 1 2 3 * 4
    if(data[j] > data[j + 1]){
      let temp = data[j]
      data[j] = data[ j + 1]
      data[j + 1] = temp;
    }
  }
}


console.log(data);

[ 12, 25, 30, 40 ]



REVERSE ARRAY :-
1. 
let dummy = [1,2,3,4]
dummy.reverse()
console.log(dummy)


2.
[3, 20, 9, 0]
how to reverse this 
[0,9,20,3]

Logic :-


let data = [5, 12, 64, 89, 0];

let temp;

data.sort((a, b) => a - b);
console.log("Sorted Array", data);

function customReverse(data, start, end) {
  console.log(data);
  if (start <= end) {
    temp = data[start];
    data[start] = data[end];
    data[end] = temp;
    customReverse(data, start + 1, end - 1);
  } else {
    return;
  }
}

customReverse(data, 0, data.length - 1);

Output :-
[ 5, 12, 64, 89, 0 ]
[ 0, 12, 64, 89, 5 ]
[ 0, 89, 64, 12, 5 ]
[ 0, 89, 64, 12, 5 ]


Inbuild Function in js

let item = [200, 30, 340, 23, 34, 4];

item.reverse();

console.log(item);
[ 4, 34, 23, 340, 30, 200 ]

