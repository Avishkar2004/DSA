Recursion and tail recursion with JavaScript
A commonly used definition of recursion is that it is a self-invoking function. But what does that mean? Usually, you write the function, and then you call it. With recursion, inside of the body of the function, you also call it.


function recursionFunc() {
    //some code
    recursionFunc();
}

Looking at snippet about, you might think, this is an infinite loop. What about stack overflow? And you are right. When writing recursion, you need to pay special attention to the end case. But there is a bit more about that one bellow. First, answer to the other question you might ask.


Why and when would you use recursion?
There are different use cases, and everyone has their own opinion. I think they are great when you need to loop something, but you don’t know how many times. Long pull from the server, where you are fetching data as long as there is some. Also, traversing the tree, like HTML nodes and nodes of binary trees.


-Breaking recursion
function factorial (number) {
    if(number === 1) {
        return number
    } else {
        return number * factorial(number - 1)
    }
}

factorial(5) //120


To calculate factorial, you sum all numbers until you reach one. That is also the end case for our recursion, and it is why once we reach value one, we don’t call factorial function anymore.


1. Tail recursion :-
-Tail recursion is a type of recursive function when the last thing executed is a recursive call.

factorial(5); // step 1
5 * factorial(4); // step 2
5 * 4 * factorial(3); // step 3
5 * 4 * 3 * factorial(2); // step 4
5 * 4 * 3 * 2 * factorial(1); // step 5
5 * 4 * 3 * 2 * 1; // step 6


As you can see above, first, each factorial call is run. Only then it is multiplying all the number. To convert it to tail recursion, I am changing the function to accept the result as a second parameter.


function tailRecursiveFactorial(number, result = 1) {
    if(numer === 1) {
        return result;
    } else {
        return tailRecursiveFactorial(number - 1, result * number);
    }
}

tailRecursiveFactorial(5); //120

In this case, the function is executing in the following steps.

Step 1: tailRecursiveFactorial(5, 1)
Step 2: tailRecursiveFactorial(4, 5)
Step 3: tailRecursiveFactorial(3, 20)
Step 4: tailRecursiveFactorial(2, 60)
Step 5: tailRecursiveFactorial(1, 120)

This type requires fewer operations and needs fewer items on a stack, which means more performant execution.


2. Head Recursion :-
If a recursive function calling itself and that recursive call is the first statement in the function then it’s known as Head Recursion. There’s no statement, no operation before the call
-

<!-- Head recursion -->
function fun(n) {
    if( n > 0) {
        fun(n - 1);
        console.log( " " + n)
    }
}

<!-- Driver code -->
var x = 3;
fun(x)

output :-

1 2 3

watch head recursion photo 

Let’s understand the example by tracing tree of recursive function. That is how the calls are made and how the outputs are produced.



Time Complexity For Head Recursion: O(n) 
Space Complexity For Head Recursion: O(n)

Note: Time & Space Complexity is given for this specific example. It may vary for another example.
Note: Head recursion can’t easily convert into loop as Tail Recursion but it can. Let’s convert the above code into the loop.

function fun(n) {
    var i = 1;
    while( i <= n) {
        console.log(" " + i);
        i++;
    }
}

var x = 3;
func=(x)

Output = 
1
2
3


This is a function chaining :-

function colors() {
  let data = 20
  console.log(data)
  if(true) {
    console.log(data *  20)
  } else {
    console.log(data / 20)
  }
  console.log(data)
}

function days() {
  colors();
}

function fruits() {
  days();
}

function topFunction() {
  fruits();
}

topFunction();
Output :-
20
400
20

this is called call stack :-
call stack follows LIFO principle
-LAST IN FIRST OUT


HEAD AND TAIL RECURSION  :-

function test(x) {
  // this is a head recursion
  console.log(x);
  if (x > 0) {
    test(x - 1);
  }
  //this is a tail recursion
  // console.log(x)
}
let data = 5
console.log(test(data));
