linked list  depends on nodes, har ek node ke andar 2 part hote hai 1.value 2.next (address of next node)  ye jab tak chalega tab tak meri data khatam nhi hota tab tak ye chalata rahega aur jab hamara last ke adr value to hogi but vaha pe null hoga
-last part jo hota hai link list ka usko hum bolte hai "tail"
-first part jo hota hai link list ka usko hum bolte hai "head"
- head, tail, node , value, next ke ird gird ghumati hai hamari linked list
- js ke adr ye dikhange object ke form mai


what we have in node ?
- head, tail, node, val, next

node => object ki trh dikhenge


This is linked list:-

class List {
  constructor(data) {
    //! This is a head
    this.head = {
      value: data,
      next: null,
    };
    //!  This is a tail
    this.tail = this.head;
  }
}

let list = new List(200);
console.log(list);


out :-

List {
  head: { value: 200, next: null },
  tail: { value: 200, next: null }
}



This is linked list with add Function

class List {
  constructor(data) {
    //! This is a head
    this.head = {
      value: data,
      next: null,
    };
    //!  This is a tail
    this.tail = this.head;
  }
  //! Function bana deta hu value ko insert krne ke liye
  appendNode(nodeData) {
    let newNode = {
        value: nodeData,
        next : null
    };
    this.tail.next = newNode;
    this.tail = newNode;
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
console.log(list);

out :-

List {head: {...}, tail: {...}}
head :(2) {value: 200, next: {...}}
value : 200
next: (2) {value: 300, next: {...}}
value:300
next: (2) {value: 400, next: null}
value : 400 next : null
tail: (2) {value: 400, next: null}



With Size :-

class List {
  constructor(data) {
    //! This is a head
    this.head = {
      value: data,
      next: null,
    };
    //!  This is a tail
    this.tail = this.head;
    this.size = 1;
  }
  //! Function bana deta hu value ko insert krne ke liye
  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size += 1;
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
console.log(list);

out :-

List {
  head: { value: 200, next: { value: 300, next: [Object] } },
  tail: { value: 400, next: null },
  size: 3
}



==============


Traversing :-


class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  Traversing() {
    let counter = 0;
    let currentNode = this.head
    while (counter < this.size) {
      console.log(currentNode)
      currentNode = currentNode.next
      counter++;

    }
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
console.log(list);
list.Traversing();

============
Update Node At Specific Positions :-

class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  Traversing() {
    let counter = 0;
    let currentNode = this.head;
    while (counter < this.size) {
      console.log(currentNode);
      currentNode = currentNode.next;
      counter++;
    }
  }

  //! Update Node's specific valur
  updateNode(oldValue, newValue) {
    let currentNode = this.head;
    while (currentNode !== null) {
      if (currentNode.value === oldValue) {
        currentNode.value = newValue;
        return;
      }
      currentNode = currentNode.next;
    }
    console.log("Valur not found in the list");
  }


  
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
console.log("Before Update");
list.Traversing();

list.updateNode(300, 30);
console.log("After Update");
list.Traversing();


==========

Remove Node Linked List at specific Positions

class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  Traversing() {
    let counter = 0;
    let currentNode = this.head;
    while (counter < this.size) {
      console.log(currentNode);
      currentNode = currentNode.next;
      counter++;
    }
  }

  //! Update Node's specific valur
  updateNode(oldValue, newValue) {
    let currentNode = this.head;
    while (currentNode !== null) {
      if (currentNode.value === oldValue) {
        currentNode.value = newValue;
        return;
      }
      currentNode = currentNode.next;
    }
    console.log("Valur not found in the list");
  }

  deleteNode(index) {
    if (index < 1 || index > this.size) {
      console.log("Index out of range");
      return;
    }

    if (index === 1) {
      this.head = this.head.next;
      if (this.head === null) {
        this.tail = null;
      }
    } else {
      let counter = 1;
      let lead = this.head;
      while (counter < index - 1) {
        lead = lead.next;
        counter++;
      }
      lead.next = lead.next.next;
      if (index === this.size) {
        this.tail = lead;
      }
    }
    this.size--;
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
list.updateNode(300, 2);
list.Traversing();


===================

insertNode at specific position


class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  //!
  Traversing() {
    let counter = 0;
    let currentNode = this.head;
    while (counter < this.size) {
      // console.log(currentNode);
      currentNode = currentNode.next;
      counter++;
    }
  }

  //! Update Node's specific value
  updateNode(oldValue, newValue) {
    let currentNode = this.head;
    while (currentNode !== null) {
      if (currentNode.value === oldValue) {
        currentNode.value = newValue;
        return;
      }
      currentNode = currentNode.next;
    }
    console.log("Value not found in the list");
  }

  //! Delete node at specific Position
  deleteNode(index) {
    if (index < 1 || index > this.size) {
      console.log("Index out of range");
      return;
    }

    if (index === 1) {
      this.head = this.head.next;
      if (this.head === null) {
        this.tail = null;
      }
    } else {
      let counter = 1;
      let lead = this.head;
      while (counter < index - 1) {
        lead = lead.next;
        counter++;
      }
      lead.next = lead.next.next;
      if (index === this.size) {
        this.tail = lead;
      }
    }
    this.size--;
  }

  //! Add value at specific position
  insertNode(index, value) {
    let counter = 1;
    let currentNode = this.head;
    while (counter > index) {
      counter++;
      currentNode = currentNode.next;
    }
    let nextNode = currentNode.next;
    currentNode.next = {
      value: value,
      next: nextNode,
    };
  }
  
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
list.insertNode(2, 5000);
// list.Traversing();


console.log(list);


=================

Search Node in Linked List (based on value)



class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  //!
  Traversing() {
    let counter = 0;
    let currentNode = this.head;
    while (counter < this.size) {
      // console.log(currentNode);
      currentNode = currentNode.next;
      counter++;
    }
  }

  //! Update Node's specific value
  updateNode(oldValue, newValue) {
    let currentNode = this.head;
    while (currentNode !== null) {
      if (currentNode.value === oldValue) {
        currentNode.value = newValue;
        return;
      }
      currentNode = currentNode.next;
    }
    console.log("Value not found in the list");
  }

  //! Delete node at specific Position
  deleteNode(index) {
    if (index < 1 || index > this.size) {
      console.log("Index out of range");
      return;
    }

    if (index === 1) {
      this.head = this.head.next;
      if (this.head === null) {
        this.tail = null;
      }
    } else {
      let counter = 1;
      let lead = this.head;
      while (counter < index - 1) {
        lead = lead.next;
        counter++;
      }
      lead.next = lead.next.next;
      if (index === this.size) {
        this.tail = lead;
      }
    }
    this.size--;
  }

  //! Add value at specific position
  insertNode(index, value) {
    let counter = 1;
    let currentNode = this.head;
    while (counter > index) {
      counter++;
      currentNode = currentNode.next;
    }
    let nextNode = currentNode.next;
    currentNode.next = {
      value: value,
      next: nextNode,
    };
  }
  //! Search Node in Linked List (based on value)
  SearchNode(data) {
    let result = undefined;
    let lead = this.head;
    let loop = true;
    while (loop) {
      lead = lead.next;
      // console.log(lead)
      loop = !!lead;
      if (loop && lead.value === data) {
        loop = false;
        result = lead;
      }
    }
    if (result === undefined) {
      console.log("Value dont exist");
    } else {
      console.log(result);
    }
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
list.insertNode(2, 5000);
// list.Traversing();

list.SearchNode(400);

// console.log(list);

===============

Search Node at index(based on index)

class List {
  constructor(data) {
    this.head = {
      value: data,
      next: null,
    };
    this.tail = this.head;
    this.size = 1;
  }

  appendNode(nodeData) {
    let newNode = {
      value: nodeData,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.size++;
  }
  //!
  Traversing() {
    let counter = 0;
    let currentNode = this.head;
    while (counter < this.size) {
      // console.log(currentNode);
      currentNode = currentNode.next;
      counter++;
    }
  }

  //! Update Node's specific value
  updateNode(oldValue, newValue) {
    let currentNode = this.head;
    while (currentNode !== null) {
      if (currentNode.value === oldValue) {
        currentNode.value = newValue;
        return;
      }
      currentNode = currentNode.next;
    }
    console.log("Value not found in the list");
  }

  //! Delete node at specific Position
  deleteNode(index) {
    if (index < 1 || index > this.size) {
      console.log("Index out of range");
      return;
    }

    if (index === 1) {
      this.head = this.head.next;
      if (this.head === null) {
        this.tail = null;
      }
    } else {
      let counter = 1;
      let lead = this.head;
      while (counter < index - 1) {
        lead = lead.next;
        counter++;
      }
      lead.next = lead.next.next;
      if (index === this.size) {
        this.tail = lead;
      }
    }
    this.size--;
  }

  //! Add value at specific position
  insertNode(index, value) {
    let counter = 1;
    let currentNode = this.head;
    while (counter > index) {
      counter++;
      currentNode = currentNode.next;
    }
    let nextNode = currentNode.next;
    currentNode.next = {
      value: value,
      next: nextNode,
    };
  }
  //! Search Node in Linked List (based on value)
  SearchNode(data) {
    let result = undefined;
    let lead = this.head;
    let loop = true;
    while (loop) {
      lead = lead.next;
      // console.log(lead)
      loop = !!lead;
      if (loop && lead.value === data) {
        loop = false;
        result = lead;
      }
    }
    if (result === undefined) {
      console.log("Value dont exist");
    } else {
      console.log(result);
    }
  }
  //! Search Node By Index
  SearchNodeByIndex(index) {
    if (index < 1 || index > this.size) {
      console.log("Index is out of range");
      return;
    }
    let counter = 1;
    let currentNode = this.head;
    while (counter < index) {
      currentNode = currentNode.next;
      counter++;
    }
    console.log(currentNode);
    return currentNode;
  }
}

let list = new List(200);
list.appendNode(300);
list.appendNode(400);
list.insertNode(2, 5000);
// list.Traversing();

list.SearchNode(400);
list.SearchNodeByIndex(2)
// console.log(list);
