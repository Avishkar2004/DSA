The Searching Algorithm can be implemented with other languages as well. But here we will work with JavaScript to solve the Searching Algorithms. These algorithms are used to handle or work with the search related task in our projects or any applications that require searching. Searching is made easier by these algorithms. Searching is fundamental to any programming language. It would be a waste to have data structures, and no way of searching through them.The two searching algorithms we will be looking at are Linear search, and Binary search.When data items are random or not sorted, we use sequential or linear search. When data is already sorted, we use binary search. Binary search only works when your data is sorted, and we must take into account the cost of sorting the data before we even begin searching through it. When writing code, performance is everything so we need to think through before we execute them. Let’s look at each algorithm.


The time complexity of the Linear Search algorithm is O(n), where n is the number of elements in the array. The space complexity is O(1) as it requires a constant amount of extra space regardless of the input size.

Searching :- array hai 

[10,3,23,42,35,45,52]

Two type of searching algorithm :-

1.  Linear search : - In linear search we start from the beginning and one by one check element is equal to target or not . If it is then return
- hum ek ek element pe jake check karte hai
- This is the basic kind of search. Here, given a list of data, we start from the beginning of the collection and iterate through each item until we find what we are looking for. Suppose we had a dataset with 1000 items. Using Linear search it is actually possible that the item we are looking for is the 1000th item. So the worse case scenario is that we search 1000 items in order to find what we are looking for. The runtime complexity for linear search is O(n), which is a Big O notation representing the worst runtime for a given algorithm. The “n” you see stands for number of operations for a given search. Yes its possible that the item you are looking for could be the 1st item, but the truth is we really don’t know (its not sorted). If we find the item early then that’s awesome. But there is a possibility that its located at the last spot (or closer to the end), in which case we would have to go through all items before we find what we are looking for. It is also possible that we don’t find the item at all. In which case we would have also gone through 1000 items for nothing. This way of searching is the brute-force technique, because we could potentially visit all items.

Pseudocode
- Function accepts an array and a value.
- Loop through the array and check if the current array element is equal to the value.
- If it is,return the index at which the element is found.
- If the value is never found,return -1.

O(1) best,O(n) averag

Eg 1 :-


var linearSearch = function(city, value) {
    for(let i= 0; i< city.length; i++) {
        if(city[i] === value) 
        return i
    }
    return - 1
}


var city = ["kathmandu","pokhara","butwal","birgunj","mahendranagar","janakpur","dharan","narangadh","bhairawa"]
console.log(linearSearch(city , "butwal"))
Output :- 3

- complexity of Linear Search Alog :-

Eg 2:- 

-Time complexity :- f(n) - depends on input element f(n) = o(n^2) Eg :- 6 * 6 
- Space complexity :- 




For Search algorithm :-

We can Find Element Position :-
let data = [30, 13, 14, 75, 56, 17, 48, 29];
let find = 56;
let pos = undefined;
for (let i = 0; i < data.length; i++) {
  if (data[i] == find) {
    pos = i;
    break;
  }
}

console.log(pos);

if(!pos) {
    alert("Element not found")
}


NOTES :-
Searching algorithms are essential tools in computer science used to locate specific items within a collection of data. These algorithms are designed to efficiently navigate through data structures to find the desired information, making them fundamental in various applications such as databases, web search engines, and more.


2.String Search :-

- Loop Over the longer string.
- Loop Over the shorter string.
- If the characters don’t match,break out of the inner loop.
- If the characters match,Keep going.
- If you complete the inner loop and find a match, increment the count of matches.
- Return the count

function naiveSearchs(str, word) {
    var count = 0
    for(let i = 0; i < str.length; i++) {
        for(let j = 0; j < str.length; j++) {
            if(word[i] !== str[i + j]) break
            if(j === word.length - 1 ) count ++
        }
    }
    return count
}

console.log(naiveSearch("search and find", "an"))
output: [1]


// Construct a table with table[i] as the length of the longest prefix of the substring 0..i
// create a table of size equal to the length of `str`
// table[i] will store the prefix of the longest prefix of the substring str[0..i]
// the longest prefix of the substring str[0] has length
// for the substrings the following substrings, we have two cases
// case 1. the current character doesn't match the last character of the longest prefix
// if that is the case, we have to backtrack, and try find a character  that will be equal to the current character
// if we reach 0, then we couldn't find a chracter
// case 2. The last character of the longest prefix matches the current character in `str`
// if that is the case, we know that the longest prefix at position i has one more character.
// for example consider `.` be any character not contained in the set [a.c]
// str = abc....abc
// consider `i` to be the last character `c` in `str`
// maxPrefix = will be 2 (the first `c` in `str`)
// maxPrefix now will be 3
// so the max prefix for table[9] is 3
function makeTable(str) {
    var table = new Array(str.length);
    var maxPrefix = 0;
    
    table[0] = 0;
  
    
    for (var i = 1; i < str.length; i++) {
      while (maxPrefix > 0 && str.charAt(i) !== str.charAt(maxPrefix)) {
        
        maxPrefix = table[maxPrefix - 1];
      }
      
      if (str.charAt(maxPrefix) === str.charAt(i)) {
        maxPrefix++;
      }
      table[i] = maxPrefix;
    }
    return table;
  }
  
// Find all the words that matches in a given string `str`
// this algorithm is based on the Knuth–Morris–Pratt algorithm. Its beauty consists in that it performs the matching in O(n)
// find the prefix table in O(n)
// `j` is the index in `word(P)`
// `i` is the index in `str(S)`
// Case 1.  S[i] == P[j] so we move to the next index in `S` and `P`
// Case 2.  `j` is equal to the length of `P`
// that means that we reached the end of `P` and thus we found a match
// Next we have to update `j` because we want to save some time
// instead of updating to j = 0 , we can jump to the last character of the longest prefix well known so far.
// j-1 means the last character of `P` because j is actually `P.length`
// e.g.
// S =  a b a b d e
// P = `a b`a b
// we will jump to `a b` and we will compare d and a in the next iteration
// a b a b `d` e
//  a b `a` b
// Case 3.
// S[i] != P[j] There's a mismatch!
// if we have found at least a character in common, do the same thing as in case 2
// otherwise, j = 0, and we can move to the next character S[i+1]function kmpMatching(str, word) {
   
    var prefixes = makeTable(word);
    var matches = [];
    
    
    var j = 0;
    var i = 0;
    while (i < str.length) {
      
      if (str.charAt(i) === word.charAt(j)) {
        i++;
        j++;
      }
      
      if (j === word.length) {
        matches.push(i-j);
        
        j = prefixes[j-1];
      }
      
      else if (str.charAt(i) !== word.charAt(j)) {
          
          if (j !== 0) {
              j = prefixes[j-1];
          } else {
              
              i++;
          }
      }
    }
  
    return matches;
  }
console.log(kmpMatching("it implies that it is very important","impo"))
output: [27]